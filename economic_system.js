// –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –°–ò–°–¢–ï–ú–ê –î–õ–Ø –¢–ê–†–û-–ë–û–¢–ê

// –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let userLevel = parseInt(localStorage.getItem('userLevel')) || 1;
let userXP = parseInt(localStorage.getItem('userXP')) || 0;
let userAchievements = JSON.parse(localStorage.getItem('userAchievements')) || [];

// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const achievements = [
    { id: 'first_reading', name: '–ü–µ—Ä–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', xp: 50, icon: 'üîÆ' },
    { id: 'first_game', name: '–ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞', description: '–°—ã–≥—Ä–∞–π—Ç–µ –≤ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É', xp: 30, icon: 'üéÆ' },
    { id: 'coin_collector', name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –º–æ–Ω–µ—Ç', description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 1000 –º–æ–Ω–µ—Ç', xp: 100, icon: 'üí∞' },
    { id: 'game_master', name: '–ú–∞—Å—Ç–µ—Ä –∏–≥—Ä', description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 –∏–≥—Ä', xp: 150, icon: 'üèÜ' },
    { id: 'daily_player', name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–≥—Ä–æ–∫', description: '–í—Ö–æ–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', xp: 200, icon: 'üìÖ' },
    { id: 'lucky_streak', name: '–ü–æ–ª–æ—Å–∞ –≤–µ–∑–µ–Ω–∏—è', description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 5 –∏–≥—Ä –ø–æ–¥—Ä—è–¥', xp: 300, icon: 'üçÄ' },
    { id: 'tarot_expert', name: '–≠–∫—Å–ø–µ—Ä—Ç –¢–∞—Ä–æ', description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 50 –≥–∞–¥–∞–Ω–∏–π', xp: 250, icon: 'üé¥' },
    { id: 'quiz_master', name: '–ú–∞—Å—Ç–µ—Ä –≤–∏–∫—Ç–æ—Ä–∏–Ω', description: '–ü—Ä–æ–π–¥–∏—Ç–µ –≤—Å–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω–∞ 100%', xp: 400, icon: 'üß†' }
];

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã
function getDailyBonus() {
    const lastBonusDate = localStorage.getItem('lastBonusDate');
    const today = new Date().toDateString();
    
    if (lastBonusDate !== today) {
        const streak = parseInt(localStorage.getItem('bonusStreak')) || 0;
        const newStreak = streak + 1;
        const bonusAmount = Math.min(50 + (newStreak * 10), 200); // –û—Ç 50 –¥–æ 200 –º–æ–Ω–µ—Ç
        
        localStorage.setItem('lastBonusDate', today);
        localStorage.setItem('bonusStreak', newStreak.toString());
        
        addCoins(bonusAmount);
        addXP(25);
        
        showNotification('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', `–ü–æ–ª—É—á–µ–Ω–æ ${bonusAmount} –º–æ–Ω–µ—Ç! –°–µ—Ä–∏—è: ${newStreak} –¥–Ω–µ–π`, 'success');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        if (newStreak === 7) {
            unlockAchievement('daily_player');
        }
        
        return true;
    }
    return false;
}

// –°–∏—Å—Ç–µ–º–∞ –æ–ø—ã—Ç–∞ –∏ —É—Ä–æ–≤–Ω–µ–π
function addXP(amount) {
    userXP += amount;
    localStorage.setItem('userXP', userXP.toString());
    
    const newLevel = Math.floor(userXP / 100) + 1;
    if (newLevel > userLevel) {
        userLevel = newLevel;
        localStorage.setItem('userLevel', userLevel.toString());
        
        const levelReward = userLevel * 100;
        addCoins(levelReward);
        
        showNotification('üéâ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!', `–£—Ä–æ–≤–µ–Ω—å ${userLevel}! –ü–æ–ª—É—á–µ–Ω–æ ${levelReward} –º–æ–Ω–µ—Ç`, 'success');
    }
}

// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function unlockAchievement(achievementId) {
    if (!userAchievements.includes(achievementId)) {
        userAchievements.push(achievementId);
        localStorage.setItem('userAchievements', JSON.stringify(userAchievements));
        
        const achievement = achievements.find(a => a.id === achievementId);
        if (achievement) {
            addXP(achievement.xp);
            showNotification('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!', `${achievement.icon} ${achievement.name}`, 'success');
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements() {
    const balance = getCurrentBalance();
    const gamesPlayed = parseInt(localStorage.getItem('gamesPlayed')) || 0;
    const readingsDone = parseInt(localStorage.getItem('readingsDone')) || 0;
    const gamesWon = parseInt(localStorage.getItem('gamesWon')) || 0;
    const winStreak = parseInt(localStorage.getItem('winStreak')) || 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (balance >= 1000 && !userAchievements.includes('coin_collector')) {
        unlockAchievement('coin_collector');
    }
    
    if (gamesWon >= 10 && !userAchievements.includes('game_master')) {
        unlockAchievement('game_master');
    }
    
    if (readingsDone >= 50 && !userAchievements.includes('tarot_expert')) {
        unlockAchievement('tarot_expert');
    }
    
    if (winStreak >= 5 && !userAchievements.includes('lucky_streak')) {
        unlockAchievement('lucky_streak');
    }
}

// –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
function getSeasonalEvent() {
    const now = new Date();
    const month = now.getMonth() + 1;
    const day = now.getDate();
    
    // –ù–æ–≤—ã–π –≥–æ–¥
    if (month === 1 && day <= 7) {
        return {
            name: '–ù–æ–≤–æ–≥–æ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ',
            description: '–î–≤–æ–π–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –∑–∞ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è!',
            multiplier: 2,
            icon: 'üéÑ'
        };
    }
    
    // –•—ç–ª–ª–æ—É–∏–Ω
    if (month === 10 && day >= 25) {
        return {
            name: '–•—ç–ª–ª–æ—É–∏–Ω',
            description: '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –±–æ–Ω—É—Å—ã!',
            multiplier: 1.5,
            icon: 'üéÉ'
        };
    }
    
    // –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –±–æ—Ç–∞ (–ø—Ä–∏–º–µ—Ä)
    if (month === 6 && day === 15) {
        return {
            name: '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –±–æ—Ç–∞',
            description: '–¢—Ä–æ–π–Ω—ã–µ –º–æ–Ω–µ—Ç—ã!',
            multiplier: 3,
            icon: 'üéÇ'
        };
    }
    
    return null;
}

// –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
function generateReferralCode() {
    const userId = localStorage.getItem('userId') || Math.random().toString(36).substr(2, 9);
    localStorage.setItem('userId', userId);
    return userId;
}

function useReferralCode(code) {
    const usedCodes = JSON.parse(localStorage.getItem('usedReferralCodes')) || [];
    
    if (usedCodes.includes(code)) {
        return false; // –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
    }
    
    usedCodes.push(code);
    localStorage.setItem('usedReferralCodes', JSON.stringify(usedCodes));
    
    // –ë–æ–Ω—É—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    addCoins(100);
    addXP(50);
    
    showNotification('üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å', '–ü–æ–ª—É—á–µ–Ω–æ 100 –º–æ–Ω–µ—Ç –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞!', 'success');
    
    return true;
}

// –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
function getGiftBox() {
    const lastGiftDate = localStorage.getItem('lastGiftDate');
    const today = new Date().toDateString();
    
    if (lastGiftDate !== today) {
        const gifts = [
            { type: 'coins', amount: 50, name: '–ú–æ–Ω–µ—Ç—ã' },
            { type: 'coins', amount: 100, name: '–ë–æ–ª—å—à–µ –º–æ–Ω–µ—Ç' },
            { type: 'xp', amount: 25, name: '–û–ø—ã—Ç' },
            { type: 'bonus', amount: 1, name: '–ë–æ–Ω—É—Å–Ω–∞—è –∏–≥—Ä–∞' }
        ];
        
        const randomGift = gifts[Math.floor(Math.random() * gifts.length)];
        
        localStorage.setItem('lastGiftDate', today);
        
        if (randomGift.type === 'coins') {
            addCoins(randomGift.amount);
        } else if (randomGift.type === 'xp') {
            addXP(randomGift.amount);
        } else if (randomGift.type === 'bonus') {
            localStorage.setItem('bonusGames', (parseInt(localStorage.getItem('bonusGames')) || 0) + 1);
        }
        
        showNotification('üéÅ –ü–æ–¥–∞—Ä–æ–∫!', `–ü–æ–ª—É—á–µ–Ω–æ: ${randomGift.name}`, 'success');
        
        return true;
    }
    return false;
}

// –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
function getLoyaltyBonus() {
    const daysActive = parseInt(localStorage.getItem('daysActive')) || 0;
    const newDaysActive = daysActive + 1;
    localStorage.setItem('daysActive', newDaysActive.toString());
    
    if (newDaysActive % 30 === 0) {
        const loyaltyReward = newDaysActive * 10;
        addCoins(loyaltyReward);
        addXP(100);
        
        showNotification('üíé –ë–æ–Ω—É—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', `–ó–∞ ${newDaysActive} –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${loyaltyReward} –º–æ–Ω–µ—Ç`, 'success');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
function initEconomicSystem() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
    getDailyBonus();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∞—Ä–∫–∏
    getGiftBox();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    getLoyaltyBonus();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    checkAchievements();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    updateLevelDisplay();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
function updateLevelDisplay() {
    const levelElement = document.getElementById('userLevel');
    if (levelElement) {
        levelElement.textContent = `–£—Ä–æ–≤–µ–Ω—å ${userLevel}`;
    }
    
    const xpElement = document.getElementById('userXP');
    if (xpElement) {
        const currentLevelXP = userXP % 100;
        const nextLevelXP = 100;
        xpElement.textContent = `${currentLevelXP}/${nextLevelXP} XP`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function showAchievements() {
    const modal = document.createElement('div');
    modal.className = 'achievement-modal';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.9);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
        animation: fadeIn 0.3s ease-out;
    `;
    
    const content = document.createElement('div');
    content.style.cssText = `
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 40px;
        border-radius: 25px;
        text-align: center;
        max-width: 600px;
        width: 90%;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: 0 20px 40px rgba(0,0,0,0.5);
        animation: slideInUp 0.5s ease-out;
    `;
    
    const unlockedAchievements = achievements.filter(a => userAchievements.includes(a.id));
    const lockedAchievements = achievements.filter(a => !userAchievements.includes(a.id));
    
    content.innerHTML = `
        <h2 style="margin: 0 0 30px 0; font-size: 28px;">üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
        
        <div style="margin-bottom: 30px;">
            <h3 style="margin: 0 0 20px 0; font-size: 20px;">–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (${unlockedAchievements.length})</h3>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px;">
                ${unlockedAchievements.map(achievement => `
                    <div style="background: rgba(255,255,255,0.2); padding: 15px; border-radius: 15px;">
                        <div style="font-size: 24px; margin-bottom: 10px;">${achievement.icon}</div>
                        <div style="font-weight: 600; margin-bottom: 5px;">${achievement.name}</div>
                        <div style="font-size: 14px; opacity: 0.9;">${achievement.description}</div>
                    </div>
                `).join('')}
            </div>
        </div>
        
        <div style="margin-bottom: 30px;">
            <h3 style="margin: 0 0 20px 0; font-size: 20px;">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (${lockedAchievements.length})</h3>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px;">
                ${lockedAchievements.map(achievement => `
                    <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 15px; opacity: 0.6;">
                        <div style="font-size: 24px; margin-bottom: 10px;">üîí</div>
                        <div style="font-weight: 600; margin-bottom: 5px;">${achievement.name}</div>
                        <div style="font-size: 14px; opacity: 0.9;">${achievement.description}</div>
                    </div>
                `).join('')}
            </div>
        </div>
        
        <button onclick="this.closest('.achievement-modal').remove()" style="
            background: rgba(255,255,255,0.2);
            border: 2px solid white;
            color: white;
            padding: 12px 30px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
        " onmouseover="this.style.background='rgba(255,255,255,0.3)'" 
           onmouseout="this.style.background='rgba(255,255,255,0.2)'">
            –ó–∞–∫—Ä—ã—Ç—å
        </button>
    `;
    
    modal.appendChild(content);
    document.body.appendChild(modal);
}

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const originalDeductCoins = window.deductCoins;
window.deductCoins = function(amount) {
    originalDeductCoins(amount);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
    const spentCoins = parseInt(localStorage.getItem('spentCoins')) || 0;
    localStorage.setItem('spentCoins', (spentCoins + amount).toString());
};

const originalAddCoins = window.addCoins;
window.addCoins = function(amount) {
    originalAddCoins(amount);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
    const earnedCoins = parseInt(localStorage.getItem('earnedCoins')) || 0;
    localStorage.setItem('earnedCoins', (earnedCoins + amount).toString());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    checkAchievements();
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    initEconomicSystem();
});
