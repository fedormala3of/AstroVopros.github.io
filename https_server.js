const https = require('https');
const fs = require('fs');
const path = require('path');
const express = require('express');
const cors = require('cors');

const app = express();
const PORT = 3443;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∏–Ω–∏-–∞–ø–ø–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'mini_app', 'index.html'));
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç
app.get('/api/cards', (req, res) => {
    const { tarotCards } = require('./bot.js');
    res.json(tarotCards);
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤
app.get('/api/spreads', (req, res) => {
    const { spreads } = require('./bot.js');
    res.json(spreads);
});

// API –¥–ª—è –≥–∞–¥–∞–Ω–∏—è
app.post('/api/reading', (req, res) => {
    const { performReading } = require('./bot.js');
    const { spreadType, question } = req.body;
    
    if (!spreadType || !question) {
        return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã spreadType –∏ question' });
    }
    
    try {
        const interpretation = performReading(spreadType, question);
        res.json({ success: true, interpretation });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≥–∞–¥–∞–Ω–∏—è' });
    }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
function checkSSLCerts() {
    const keyPath = path.join(__dirname, 'key.pem');
    const certPath = path.join(__dirname, 'cert.pem');
    
    if (!fs.existsSync(keyPath) || !fs.existsSync(certPath)) {
        console.error('‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node create_ssl_simple.js');
        process.exit(1);
    }
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å
        const keyContent = fs.readFileSync(keyPath, 'utf8');
        const certContent = fs.readFileSync(certPath, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        if (!keyContent.includes('-----BEGIN RSA PRIVATE KEY-----') || 
            !certContent.includes('-----BEGIN CERTIFICATE-----')) {
            console.error('‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã!');
            console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node create_ssl_simple.js');
            process.exit(1);
        }
        
        console.log('‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:', error.message);
        console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node create_ssl_simple.js');
        process.exit(1);
    }
}

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É mini_app –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
function createMiniAppFolder() {
    const miniAppPath = path.join(__dirname, 'mini_app');
    if (!fs.existsSync(miniAppPath)) {
        fs.mkdirSync(miniAppPath);
        console.log('üìÅ –ü–∞–ø–∫–∞ mini_app —Å–æ–∑–¥–∞–Ω–∞');
    }
}

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É mini_app –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
createMiniAppFolder();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
checkSSLCerts();

// –ó–∞–ø—É—Å–∫–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try {
    const options = {
        key: fs.readFileSync(path.join(__dirname, 'key.pem'), 'utf8'),
        cert: fs.readFileSync(path.join(__dirname, 'cert.pem'), 'utf8')
    };

    const server = https.createServer(options, app);
    
    server.listen(PORT, () => {
        console.log(`üöÄ HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log(`üì± –ú–∏–Ω–∏-–∞–ø–ø: https://localhost:${PORT}/`);
        console.log(`üîê SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã`);
        console.log('üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
    server.on('error', (error) => {
        if (error.code === 'EADDRINUSE') {
            console.error(`‚ùå –ü–æ—Ä—Ç ${PORT} —É–∂–µ –∑–∞–Ω—è—Ç!`);
            console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ —ç—Ç–æ–º –ø–æ—Ä—Ç—É');
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ HTTPS —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
        }
        process.exit(1);
    });
    
} catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ HTTPS —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: node check_ssl.js');
    process.exit(1);
}

module.exports = app;
