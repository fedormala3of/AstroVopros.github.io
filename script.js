// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const spreadSelection = document.getElementById('spreadSelection');
const questionInput = document.getElementById('questionInput');
const readingResult = document.getElementById('readingResult');
const loading = document.getElementById('loading');
const questionText = document.getElementById('questionText');
const submitQuestion = document.getElementById('submitQuestion');
const backToSpreads = document.getElementById('backToSpreads');
const newReading = document.getElementById('newReading');
const shareResult = document.getElementById('shareResult');
const interpretation = document.getElementById('interpretation');

// –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥
let currentSpread = null;

// –¶–µ–Ω—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤
const spreadPrices = {
    one_card: 50,
    three_cards: 100,
    celtic_cross: 200
};

// –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let userBalance = 1000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram Web App
    tg.ready();
    tg.expand();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É
    if (tg.colorScheme === 'dark') {
        document.body.classList.add('dark-theme');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await loadUserBalance();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    showSpreadSelection();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    addEventListeners();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserBalance() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (window.tarotData) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            updateBalance(1000);
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –≤–µ—Ä—Å–∏—é
            const apiUrl = window.config ? window.config.getApiUrl() : '/api/balance';
            const response = await fetch(`${apiUrl}/api/balance`);
            if (response.ok) {
                const data = await response.json();
                updateBalance(data.balance);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        updateBalance(1000);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function addEventListeners() {
    // –í—ã–±–æ—Ä —Ä–∞—Å–∫–ª–∞–¥–∞
    document.querySelectorAll('.spread-card').forEach(card => {
        card.addEventListener('click', () => {
            const spreadType = card.dataset.spread;
            selectSpread(spreadType);
        });
    });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
    submitQuestion.addEventListener('click', submitQuestionHandler);
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    backToSpreads.addEventListener('click', showSpreadSelection);
    newReading.addEventListener('click', showSpreadSelection);
    
    // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    shareResult.addEventListener('click', shareResultHandler);
    
    // Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
    questionText.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            submitQuestionHandler();
        }
    });
}

// –í—ã–±–æ—Ä —Ä–∞—Å–∫–ª–∞–¥–∞
function selectSpread(spreadType) {
    const price = spreadPrices[spreadType];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if (userBalance < price) {
        showError(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ ${price} –º–æ–Ω–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è.`);
        return;
    }
    
    currentSpread = spreadType;
    showQuestionInput();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
function updateBalance(newBalance) {
    userBalance = newBalance;
    document.getElementById('balanceAmount').textContent = newBalance;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
function updateSpreadAvailability() {
    document.querySelectorAll('.spread-card').forEach(card => {
        const spreadType = card.dataset.spread;
        const price = spreadPrices[spreadType];
        const priceElement = card.querySelector('.price');
        
        if (userBalance < price) {
            card.classList.add('disabled');
            priceElement.textContent = `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç (${price})`;
        } else {
            card.classList.remove('disabled');
            priceElement.textContent = `${price} –º–æ–Ω–µ—Ç`;
        }
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ä–∞—Å–∫–ª–∞–¥–∞
function showSpreadSelection() {
    spreadSelection.style.display = 'block';
    questionInput.style.display = 'none';
    readingResult.style.display = 'none';
    loading.style.display = 'none';
    
    // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
    questionText.value = '';
    currentSpread = null;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    updateSpreadAvailability();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
function showQuestionInput() {
    spreadSelection.style.display = 'none';
    questionInput.style.display = 'block';
    readingResult.style.display = 'none';
    loading.style.display = 'none';
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    questionText.focus();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function showLoading() {
    spreadSelection.style.display = 'none';
    questionInput.style.display = 'none';
    readingResult.style.display = 'none';
    loading.style.display = 'block';
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
function showResult(result) {
    spreadSelection.style.display = 'none';
    questionInput.style.display = 'none';
    readingResult.style.display = 'block';
    loading.style.display = 'none';
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    interpretation.innerHTML = formatInterpretation(result);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
async function submitQuestionHandler() {
    const question = questionText.value.trim();
    
    if (!question) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å');
        return;
    }
    
    if (question.length < 10) {
        showError('–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
        return;
    }
    
    if (question.length > 500) {
        showError('–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤');
        return;
    }
    
    try {
        showLoading();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (window.tarotData && window.tarotData.performReading) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é –≤–µ—Ä—Å–∏—é (–¥–ª—è GitHub Pages)
            setTimeout(() => {
                const interpretation = window.tarotData.performReading(currentSpread, question);
                const price = spreadPrices[currentSpread];
                const newBalance = userBalance - price;
                updateBalance(newBalance);
                showResult(interpretation);
            }, 2000); // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –≤–µ—Ä—Å–∏—é (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
            const apiUrl = window.config ? window.config.getApiUrl() : '/api/reading';
            const response = await fetch(`${apiUrl}/api/reading`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    spreadType: currentSpread,
                    question: question
                })
            });
            
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }
            
            const data = await response.json();
            
            if (data.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                if (data.newBalance !== undefined) {
                    updateBalance(data.newBalance);
                }
                showResult(data.interpretation);
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –≥–∞–¥–∞–Ω–∏—è');
            }
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–∞–¥–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        showQuestionInput();
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–∞–¥–∞–Ω–∏—è
function formatInterpretation(text) {
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    const lines = text.split('\n');
    let formatted = '';
    
    lines.forEach((line, index) => {
        if (line.trim()) {
            if (line.includes('üîÆ') || line.includes('‚ùì') || line.includes('üé¥') || line.includes('üí≠')) {
                formatted += `<h3 class="section-title">${line}</h3>`;
            } else if (line.match(/^\d+\./)) {
                formatted += `<div class="card-line" style="animation-delay: ${index * 0.1}s">${line}</div>`;
            } else {
                formatted += `<p class="interpretation-text" style="animation-delay: ${index * 0.1}s">${line}</p>`;
            }
        }
    });
    
    return formatted;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showError(message) {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const notification = document.createElement('div');
    notification.className = 'error-notification';
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
function shareResultHandler() {
    if (navigator.share) {
        navigator.share({
            title: 'üîÆ –ú–æ–µ –≥–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ',
            text: interpretation.textContent,
            url: window.location.href
        });
    } else {
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Share API
        const text = interpretation.textContent;
        if (navigator.clipboard) {
            navigator.clipboard.writeText(text).then(() => {
                showSuccess('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
            });
        } else {
            // –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            showSuccess('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showSuccess(message) {
    const notification = document.createElement('div');
    notification.className = 'success-notification';
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
    .error-notification, .success-notification {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 10px;
        color: white;
        font-weight: bold;
        z-index: 1000;
        animation: slideIn 0.3s ease-out;
    }
    
    .error-notification {
        background: #e74c3c;
    }
    
    .success-notification {
        background: #27ae60;
    }
    
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    .card-line {
        background: rgba(102, 126, 234, 0.1);
        padding: 10px;
        border-radius: 8px;
        margin: 5px 0;
        border-left: 4px solid #667eea;
    }
    
    .dark-theme {
        background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
    }
    
    .dark-theme .spread-card,
    .dark-theme .interpretation {
        background: rgba(255, 255, 255, 0.1);
        color: white;
    }
    
    .dark-theme .spread-card h3 {
        color: #3498db;
    }
    
    .dark-theme .spread-card p {
        color: #bdc3c7;
    }
`;

document.head.appendChild(style);

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', initApp);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (e) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', e.error);
    showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
window.addEventListener('unhandledrejection', (e) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–º–∏—Å–∞:', e.reason);
    showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
});

