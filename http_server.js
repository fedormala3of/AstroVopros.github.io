const http = require('http');
const fs = require('fs');
const path = require('path');
const express = require('express');
const cors = require('cors');

const app = express();
const PORT = 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∏–Ω–∏-–∞–ø–ø–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'mini_app', 'index.html'));
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç
app.get('/api/cards', (req, res) => {
    try {
        const { tarotCards } = require('./bot.js');
        res.json(tarotCards);
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤
app.get('/api/spreads', (req, res) => {
    try {
        const { spreads } = require('./bot.js');
        res.json(spreads);
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤' });
    }
});

// API –¥–ª—è –≥–∞–¥–∞–Ω–∏—è
app.post('/api/reading', (req, res) => {
    try {
        const { performReading, spreads } = require('./bot.js');
        const { spreadType, question } = req.body;
        
        if (!spreadType || !question) {
            return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã spreadType –∏ question' });
        }
        
        const spread = spreads[spreadType];
        if (!spread) {
            return res.status(400).json({ error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞' });
        }
        
        // –î–ª—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const currentBalance = 1000; // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newBalance = currentBalance - spread.price;
        
        if (newBalance < 0) {
            return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –≥–∞–¥–∞–Ω–∏—è' });
        }
        
        const interpretation = performReading(spreadType, question);
        res.json({ 
            success: true, 
            interpretation,
            newBalance: newBalance,
            price: spread.price
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–∞–¥–∞–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≥–∞–¥–∞–Ω–∏—è' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/balance', (req, res) => {
    // –î–ª—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    res.json({ balance: 1000 });
});

// –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
app.get('/status', (req, res) => {
    res.json({ 
        status: 'running', 
        port: PORT, 
        timestamp: new Date().toISOString() 
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = http.createServer(app);

server.listen(PORT, () => {
    console.log('üöÄ HTTP Server –∑–∞–ø—É—â–µ–Ω!');
    console.log(`üì± –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
    console.log(`üîó API —Å—Ç–∞—Ç—É—Å: http://localhost:${PORT}/status`);
    console.log(`üé¥ API –∫–∞—Ä—Ç—ã: http://localhost:${PORT}/api/cards`);
    console.log(`üìä API —Ä–∞—Å–∫–ª–∞–¥—ã: http://localhost:${PORT}/api/spreads`);
    console.log('');
    console.log('üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
server.on('error', (error) => {
    if (error.code === 'EADDRINUSE') {
        console.log(`‚ùå –ü–æ—Ä—Ç ${PORT} —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç.`);
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
    }
    process.exit(1);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});
